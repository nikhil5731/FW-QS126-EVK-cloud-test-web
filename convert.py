import byteclass
import numpy as np
from dataclasses import dataclass
import text
import json
from coms import FieldModeStatsRX
from typing import Literal
import rssi
import functools
from collections import Counter
from offsetdict import mac_avg, CUSTOMER_KEYS
from telemetrics import push_json, push_json_raw
import concurrent.futures

try:
    import cPickle as pickle
except ImportError:  # Python 3.x
    import pickle

executor = concurrent.futures.ThreadPoolExecutor()

avg_length = 5

# @dataclass
# class ICSettings:
#     bitrate_hz: int
#     carrier_hz: int
#     lna_mode: Literal['SE', 'Diff']
#     gain: int


# SETTINGS = {
#     IC_SETTING.LOW_SPEED: ICSettings(
#         bitrate_hz=208333,
#         carrier_hz=12000000,
#         lna_mode='SE',
#         gain=0x1F
#     )
# }


SCAN_REGS = 613
CACHE_REGS = 56
@dataclass
class ICSetting(byteclass.ByteClass):
    id: np.uint32 
    bitrate: np.uint32 
    clk_tx: np.uint32 
    clk_carrier: np.uint32 
    clk_irx: np.uint32 
    uni_tx_scan_regs: np.ndarray[np.uint8,613]
    uni_tx_cache_regs: np.ndarray[np.uint8,56]
    uni_rx_scan_regs: np.ndarray[np.uint8,613]
    uni_rx_cache_regs: np.ndarray[np.uint8,56]
    sched_scan_regs: np.ndarray[np.uint8,613]
    sched_cache_regs: np.ndarray[np.uint8,56]

SETTINGS:dict[int,ICSetting] = {
    0x12345678: ICSetting(
        id = 0x12345678, # TODO temp
        bitrate = 208333,
        clk_tx = 0,
        clk_carrier = 12000000,
        clk_irx = 0,
        # qs126_EVK_tx.csv
        uni_tx_scan_regs = [0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x80, 0x00, 0x4C, 0xF0, 0x07, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x30, 0x88, 0x04, 0x00, 0x00, 0x10, 0x1F, 0xCF, 0xE2, 0x76, 0xC2, 0xCC, 0x38, 0x5E, 0x45, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
        uni_tx_cache_regs = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x40, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xE2, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
        # qs126_EVK_rx.csv
        uni_rx_scan_regs = [0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0xF1, 0xF1, 0x2C, 0x6E, 0x45, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xBB, 0x00, 0x07, 0x40, 0x01, 0x14, 0x3B, 0x07, 0x00, 0x40, 0x01, 0x14, 0x1F, 0x00, 0x00, 0x42, 0x32, 0x80, 0x01, 0x00, 0x18, 0x0C, 0x16, 0x02, 0x42, 0x50, 0x4F, 0x00, 0x19, 0x64, 0x00, 0x18, 0x00, 0x0D, 0x1C, 0x08, 0x88, 0x01, 0x08, 0x40, 0x03, 0x0A, 0x14, 0x00, 0x1F, 0x20, 0xE0, 0x41, 0x04, 0x1F, 0x01, 0x40, 0x71, 0x01, 0x30, 0x95, 0x41, 0x46, 0x00, 0x28, 0x88, 0x0F, 0xE0, 0x6D, 0xC8, 0x9D, 0x27, 0x3F, 0x42, 0x00, 0x42, 0x00, 0xD6, 0x2F, 0x03, 0x00, 0x00, 0xFE, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xFF, 0x4B, 0x60, 0x25, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x13, 0xE0, 0x0C, 0x00, 0x00, 0x40, 0x14, 0x00, 0x40, 0x00, 0x20, 0xF0, 0x1F, 0x00, 0x00, 0x20, 0x13, 0xE0, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
        uni_rx_cache_regs = [0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x40, 0x00, 0xBF, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF7, 0x3F, 0xDA, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
        # qs126_EVK_rx_tx_new_withschdlir.csv (from vinayak)
        sched_scan_regs = [0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x80, 0x00, 0x4C, 0xF0, 0x07, 0x5F, 0x00, 0x00, 0x00, 0xF1, 0xF1, 0x2C, 0x6E, 0x45, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xBB, 0x00, 0x07, 0x40, 0x01, 0x14, 0x3B, 0x07, 0x00, 0x40, 0x01, 0x14, 0x1F, 0x00, 0x00, 0x42, 0x32, 0x80, 0x01, 0x00, 0x18, 0x0C, 0x16, 0x02, 0x42, 0x50, 0x4F, 0x00, 0x19, 0x64, 0x00, 0x18, 0x00, 0x0D, 0x1C, 0x08, 0x88, 0x01, 0x08, 0x40, 0x03, 0x0A, 0x14, 0x00, 0x1F, 0x20, 0xE0, 0x41, 0x04, 0x1F, 0x01, 0x40, 0x71, 0x01, 0x30, 0x95, 0x41, 0x46, 0x00, 0x28, 0x88, 0x0F, 0xE0, 0x6D, 0xC8, 0x9D, 0x27, 0x3F, 0x42, 0x00, 0x42, 0x00, 0xD6, 0x2F, 0x03, 0x00, 0x00, 0xFE, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x30, 0x88, 0x00, 0x00, 0x00, 0x10, 0x1F, 0xCF, 0xE2, 0x76, 0xC2, 0xCC, 0x38, 0x5E, 0x45, 0x89, 0xC0, 0xFF, 0x4B, 0x60, 0x25, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x13, 0xE0, 0x0C, 0x00, 0x00, 0x40, 0x14, 0x00, 0x40, 0x00, 0x20, 0xF0, 0x1F, 0x00, 0x00, 0x20, 0x13, 0xE0, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
        sched_cache_regs = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x24, 0x00, 0x01, 0x40, 0x40, 0x00, 0xBF, 0xFF, 0xFF, 0x80, 0x00, 0xE2, 0x47, 0x00, 0x80, 0xF7, 0x3F, 0xDA, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 ],
    )
}



@dataclass
class StatsRXResult(byteclass.ByteClass):
    bytes_per_packet: np.uint32
    acq_duration_us: np.uint32
    packets_missed: np.uint32
    packets_received: np.uint32
    packets_with_errors: np.uint32
    bit_count: np.uint32
    bit_errors: np.uint32
    rssi_base_avg: np.int16
    rssi_avg: np.int16


# class StatsRXReply:
#     def __init__(self, settings: FieldModeStatsRX, result: StatsRXResult) -> None:
#         ic_settings = SETTINGS[settings.icsetting_bitrate]
#         rssi_conversion = functools.partial(
#             rssi.convert_uv, **vars(ic_settings))
#         rssi_base_uv = rssi_conversion(rssi=result.rssi_base_avg)
#         rssi_signal_uv = rssi_conversion(rssi=result.rssi_avg)

#         self.Bitrate = ic_settings.bitrate_hz
#         self.BytesPerPacket = result.bytes_per_packet
#         self.Duration = result.acq_duration_us / 1e6
#         #print ('calculated RSSI') # Comment for prod
#         # PER was PwE
#         # PMDR was PER+PwE
#         self.BER = result.bit_errors / result.bit_count if result.bit_count else 0.5
#         self.PER = result.packets_with_errors / \
#             result.packets_received if result.packets_received else 1.0
#         self.PMDR = (result.packets_with_errors + result.packets_missed) / \
#             (result.packets_missed +
#              result.packets_received) if result.packets_received else 1.0
#         # TODO proper calculation with spi delays...
#         self.Latency = self.Duration / \
#             result.packets_received if result.packets_received else None
#         self.LinkMargin = rssi.link_margin(
#             rssi_base_uv, rssi_signal_uv) if result.rssi_base_avg != 32767 and result.rssi_avg != 32767 else 0.0
#         self.Throughput = (result.packets_received-result.packets_with_errors) * \
#             self.BytesPerPacket*8/self.Duration if self.Duration else 0.0
#         self.RSSIBaseV = rssi_base_uv/1e6
#         self.RSSISignalV = rssi_signal_uv/1e6

class StatsRXReply:
    def __init__(self, settings: FieldModeStatsRX, result: StatsRXResult) -> None:
        ic_setting = SETTINGS[settings.ic_setting_id]

        # some terrible bit fields reading from the scan registers
        lna_mode = 'SE' if ic_setting.uni_rx_scan_regs[0x091-0x003] & (1 << 5) else 'Diff' 
        gain = ic_setting.uni_rx_scan_regs[0x07B-0x003] & 0b11111
        
        rssi_conversion = functools.partial(rssi.convert_uv,
                                            bitrate_hz=int(ic_setting.bitrate),
                                            carrier_hz=int(ic_setting.clk_carrier),
                                            lna_mode=lna_mode,
                                            gain=gain)
        rssi_base_uv = rssi_conversion(rssi=result.rssi_base_avg)
        rssi_signal_uv = rssi_conversion(rssi=result.rssi_avg)

        self.SettingID = settings.ic_setting_id
        self.Bitrate = ic_setting.bitrate
        self.BytesPerPacket = result.bytes_per_packet
        self.Duration = result.acq_duration_us / 1e6

        # PER was PwE
        # PMDR was PER+PwE
        self.BER = result.bit_errors / result.bit_count if result.bit_count else 0.5
        self.PER = result.packets_with_errors / result.packets_received if result.packets_received else 1.0
        self.PMDR = (result.packets_with_errors + result.packets_missed) / (result.packets_missed + result.packets_received) if result.packets_received else 1.0
        self.Latency = self.Duration / result.packets_received if result.packets_received else None # TODO proper calculation with spi delays...
        self.LinkMargin = rssi.link_margin(rssi_base_uv, rssi_signal_uv) if result.rssi_base_avg != 32767 and result.rssi_avg != 32767 else 0.0
        self.Throughput = (result.packets_received-result.packets_with_errors)*self.BytesPerPacket*8/self.Duration if self.Duration else 0.0
        self.RSSIBaseV = rssi_base_uv/1e6
        self.RSSISignalV = rssi_signal_uv/1e6



def convert_stats_result(mac: str, board_id: str, py_version: str, fw_version: str, settings_b: bytearray, data: bytearray) -> dict:
    future = executor.submit(
        push_json_raw({'mac': mac, 'board_id': board_id, 'py_version': py_version, 'fw_version': fw_version,'settings': settings_b, 'data': data}))

    settings = byteclass.from_bytes(FieldModeStatsRX, settings_b)
    result = byteclass.from_bytes(StatsRXResult, data)

    # comment print for prod

    # print(text.style('SETTINGS', text.STYLE.FG_RED))
    # for k, v in vars(settings).items():
    #     print(text.style(f'{k}: {v}', text.STYLE.FG_RED))
    # print(text.style('RESULT', text.STYLE.FG_RED))
    # for k, v in vars(result).items():
    #     print(text.style(f'{k}: {v}', text.STYLE.FG_RED))

    response = vars(StatsRXReply(settings, result))

    print(type(response))

    input = {'mac': mac, 'board_id': board_id, 'py_version': py_version, 'fw_version': fw_version}

    response_dict = dict(response)

# The following code is to make sure we give certain customers averaged value 

    if mac in mac_avg and None not in response_dict.values(): #We skip None values because it's hard to average when there are none values

        # Define response store or load, if it already exists
        try:

            with open('data.p', 'rb') as fp:
                response_store = pickle.load(fp)
        except:
            response_store = {}

        # If the mac has already been tested

        if mac in response_store.keys():
            # print("stored data",len(response_store[mac]))
            if len(response_store[mac])>avg_length-1:
                response_store[mac].pop(0)  # Make sure the stored value is always equal to the avg length of averaging window
                # print(type(update_mac_response),type(response_store[mac]))
            # else :
            update_mac_response = response_store[mac]

            # Add the new response to the list of data being averaged over
            
            update_mac_response.append(response_dict) 
            response_store[mac]=update_mac_response
            # Use counter to sum over the list of dicts

            Counter_sum = Counter()
            for x in range(0,len(update_mac_response)):
                Counter_sum.update(Counter(update_mac_response[x]))
            # print("counter_sum",dict(Counter_sum))
            return_dict = {key: value / len(update_mac_response) for key, value in Counter_sum.items()} # This is the average of the values
            # avg_mac_response = dict(Counter_sum)
        else:

            # Create new response store if it doesn't already exists for the mac

            update_mac_response = []
            update_mac_response.append(response_dict)
            response_store.update({mac:update_mac_response})
            return_dict = response_dict

        # convert_stats_result.store = response_store

        # print("trying to write")
        # print(type(response_store))
        # with open('data.json', 'w') as outfile:
        #     json.dump(response_store, outfile)
        
        with open('data.p', 'wb') as fp:
            pickle.dump(response_store, fp, protocol=pickle.HIGHEST_PROTOCOL)

            ## avg over the update_mac_response to create the response
    else:
        return_dict = response_dict

    response_dict.update(input)
    return_dict.update(input)




    print('response sent')

    # future = executor.submit(push_json(response))

    future = executor.submit(push_json(response_dict))


    return return_dict
    # return {k:return_dict[k] for k in CUSTOMER_KEYS}


def ic_setting_bytes(id:int) -> bytearray | None:
    return SETTINGS[id].to_bytes('little') if id in SETTINGS.keys() else None
